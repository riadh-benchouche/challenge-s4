services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: challenge-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - dragonfly
    environment:
      DB_HOST: postgres
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DATABASE}
      REDIS_HOST: dragonfly
      REDIS_PORT: ${DRAGONFLY_PORT}

  postgres:
    image: postgres:16-alpine
    container_name: challenge-postgres
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - "5432:5432"
    volumes:
      - postgresdata:/var/lib/postgresql/data

  dragonfly:
    image: "docker.dragonflydb.io/dragonflydb/dragonfly"
    container_name: challenge-dragonfly
    ulimits:
      memlock: -1
    ports:
      - ${DRAGONFLY_PORT}:${DRAGONFLY_PORT}
    restart: unless-stopped
    volumes:
      - dragonflydata:/data

  adminer:
    image: adminer
    restart: always
    depends_on:
      - postgres
    ports:
      - 8080:8080
    environment:
      ADMINER_DEFAULT_USER: ${POSTGRES_USER}
      ADMINER_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
      ADMINER_DEFAULT_TYPE: postgresql
      ADMINER_DEFAULT_PORT: 5432
      ADMINER_DEFAULT_DB: ${POSTGRES_DATABASE}

volumes:
  postgresdata:
    driver: local
    driver_opts:
      type: none
      device: /data/postgres
      o: bind
  dragonflydata: